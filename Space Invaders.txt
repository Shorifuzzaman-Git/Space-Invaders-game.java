package game;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Cursor;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

public class mainClass extends Application {
    //variable
    public static Random rand=new Random();
    public static final int width=800;
    public static final int height=600;
    public static final int player_size=60;

    Image player_img=new Image(getClass().getResourceAsStream("roket.png"));
    static final Image explosion_img=new Image("file:C:\\Users\\Lenovo\\Downloads\\explosion.png");
    static final int explosion_w=128;
    static final int explosion_rows=3;
    static final int explosion_col=3;
    static final int explosion_h=128;
    static final int explosion_steps=15;

    static final Image boms_img[]={
            new Image("file:C:\\Users\\Lenovo\\Downloads\\1.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\2.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\3.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\4.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\5.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\6.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\7.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\8.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\9.png"),
            new Image("file:C:\\Users\\Lenovo\\Downloads\\10.png")
    };
    final int max_boms=10,max_shots=max_boms*2;
    boolean gameOver=false;
    private GraphicsContext gc;

    Rocket player;
    List<Shot>shots;
    List<Universe>univ;
    List<Bomb>boms;

    private double mouseX;
    private int score;


    @Override
    //start
    public void start(Stage stage) throws Exception {
        Canvas canvas=new Canvas(width,height);
        gc= canvas.getGraphicsContext2D();
        Timeline timeline=new Timeline(new KeyFrame(Duration.millis(100),e->run(gc)));
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();
        canvas.setCursor(Cursor.HAND);
        canvas.setOnMouseMoved(e-> mouseX=e.getX());
        canvas.setOnMouseClicked(e->{
            if(shots.size()<max_shots){
                shots.add(player.shoot());
            }
            if(gameOver){
                gameOver=false;
                setup();
            }
        });

        setup();
        stage.setScene(new Scene(new StackPane(canvas)));
        stage.setTitle("Space Invaders");
        stage.setResizable(false);
        stage.show();
    }

    //setup the game
    private void setup(){
        univ=new ArrayList<>();
        shots=new ArrayList<>();
        boms=new ArrayList<>();
        player=new Rocket(width/2,height-player_size,player_size,player_img);
        score=0;
        IntStream.range(0,max_boms).mapToObj(i ->this.newBomb()).forEach(boms::add);
    }

    //run Graphics
    private void run(GraphicsContext gc){

        gc.setFill(Color.grayRgb(20));
        //gc.setFill(Color.rgb(204,255,229,.5));
        gc.fillRect(0,0,width,height);
        gc.setTextAlign(TextAlignment.CENTER);
        gc.setFont(Font.font(20));
        gc.setFill(Color.RED);
        gc.fillText("Score : "+score,60,20);

        if(gameOver){
            gc.setFont(Font.font(35));
            gc.setFill(Color.RED);
            gc.fillText("GAME OVER \n Your Score is : "+score+"\n Click to play again.",width/2,height/2);
        }
        //add each element from the universe and draw it
        univ.forEach(Universe::draw);

        player.update();
        player.draw();

        //get the mouse position of the X axis
        player.posX=(int)mouseX;

        boms.stream().peek(Rocket::update).peek(Rocket::draw).forEach(e->{
            //if the player collided with bomb
            if(player.colide(e)&& !player.exploding){
                player.explode();
            }

        });
        //No more than 2*bomb shots on the carvs(=20)
        for(int i=shots.size()-1;i>=0;i--){
            Shot shot=shots.get(i);
            if(shot.posY<0 || shot.toRemove){
                shots.remove(i);
                continue;
            }
            shot.update();
            shot.draw();

            //get points for every bomb you shot
            for(Bomb bomb:boms){
                if(shot.colide(bomb) && !bomb.exploding){
                    score++;
                    bomb.explode();
                    shot.toRemove=true;
                }
            }
        }

        //add a new bomb if less than 10 available
        for(int i=boms.size()-1;i>=0;i--){
            if(boms.get(i).destroyed){
                boms.set(i,newBomb());
            }
        }

        gameOver=player.destroyed;
        if(rand.nextInt(10)>2){
            univ.add(new Universe());
        }

        for(int i=0;i< univ.size();i++){
            if(univ.get(i).posY>height){
                univ.remove(i);
            }
        }
    }

    //player
    public class Rocket{
        int posX,posY,size;
        boolean exploding,destroyed;
        Image img;
        int explosionStep=0;

        //cons
        public Rocket(int posX,int posY,int size,Image image){
            this.posX=posX;
            this.posY=posY;
            this.size=size;
            img=image;
        }

        public Shot shoot(){
            return new Shot(posX+size/2-Shot.size/2,posY-Shot.size);
        }

        public void update(){
            if(exploding)explosionStep++;
            destroyed=explosionStep>explosion_steps;
        }

        public void draw(){
            if(exploding){
                gc.drawImage(explosion_img,explosionStep%explosion_col*explosion_w,
                        (explosionStep/explosion_rows)*explosion_h+1,explosion_w,explosion_h,posX,posY,size,size);

            }
            else{
                gc.drawImage(img,posX,posY,size,size);
            }
        }

        public boolean colide(Rocket other){
            int d=distance(this.posX+size/2,this.posY+size/2,
                    other.posX+other.size/2,other.posY+ other.size/2);
            return d< other.size/2+this.size/2;
        }
        public void explode(){
            exploding = true;
            explosionStep=-1;
        }
    }


    //computer player
    public class Bomb extends Rocket{
        int speed=(score/5)+2;

        public Bomb(int posX, int posY, int size, Image image) {
            super(posX, posY, size, image);
        }

        public void update(){
            super.update();
            if(!exploding && !destroyed)posY+=speed;
            if(posY>height)destroyed=true;
        }
    }

    public class Shot{
        public boolean toRemove;
        int posX,posY,speed=10;
        static final int size =10;
        public Shot(int posX,int posY){
            this.posX=posX;
            this.posY=posY;
        }

        public void update(){
            posY-=speed;
        }

        public void draw(){
            gc.setFill(Color.RED);
            if(score>=20 && score<=60 || score>=100){
                gc.setFill(Color.YELLOWGREEN);
                speed=50;
                gc.fillRect(posX-5,posY-10,size+10,size+30);
            }
            else {
                gc.fillOval(posX,posY,size,size);
            }
        }

        public boolean colide(Rocket Rocket){
            int distance=distance(this.posX+size/2,this.posY+size/2,
                    Rocket.posX+ Rocket.size/2,Rocket.posY+ Rocket.size/2);
            return distance< Rocket.size/2+size/2;
        }

    }

    //environment
    public class Universe{
        int posX,posY;
        private int h,w;

        public Universe(){
            posX=rand.nextInt(width);
            posY=0;
            w=rand.nextInt(10);
            h=rand.nextInt(10);
        }

        public void draw(){
            gc.setFill(Color.rgb(255,51,51,.3));
            gc.fillOval(posX,posY,w,h);
            posY+=20;
        }
    }

    Bomb newBomb(){
        return new Bomb(50+ rand.nextInt(width-100),0,
                player_size,boms_img[rand.nextInt(boms_img.length)]);
    }

    int distance(int x1,int y1,int x2,int y2){
        return (int)Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2));
    }

    public static void main(String[] args){
        launch(args);
    }
}